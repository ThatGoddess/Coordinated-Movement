<library>

  <type name="TG_Standard">
    <x type="int">0</x>
    <y type="int">0</y>
    <protected type="boolean">false</protected>
  </type>

  <type name="editor_object">
    <inherit name="TG_Standard" />
    <inroomdesc type="string" />
    <drop type="script">
      this.x = game.pov.x
      this.y = game.pov.y
      MoveObject (this, game.pov.parent)
    </drop>
  </type>

  <type name="editor_room">
    <inherit name="TG_Standard" />
    <maxx type="int">0</maxx>
    <maxy type="int">0</maxy>
    <inroomdesc type="string"/>

    <exitMessage>You can go</exitMessage>
    <description type="script"><![CDATA[
      //Sets variable of player's location to the format of x; y. Make sure your descriptions are set the same!

      firsttime{
        if(not hasAttribute(this, "descList")){this.descList = NewScriptDictionary()}
      }
      Location = game.pov.x + "; " + game.pov.y
      ExitList = ScopeExits()

      Log("Location has: " + DictionaryCount(this.descList) + " possible descriptions.")

      if(DictionaryContains(this.descList, Location)){
        Log("Attempting to call Description.")
        invoke(ScriptDictionaryItem(this.descList, Location))
        Log("Description called successfully")
      }

      msg("")
      if (ListCount(ScopeReachableNotHeld()) > 0) {
        x = 0
        foreach (i, ScopeReachableNotHeld ()) {

          if(i.inroomdesc <> ""){
            OutputTextNoBr(Trim(i.inroomdesc) + " ")
            x = x + 1
          }
        }
        if(x > 0) {
          msg("")
          msg("")
        }
      }

      //And now for the exits! I guess you *can* edit this one in this room's exitMessage attribute Just keep in line with the format of "Message + Exits"

      if (ListCount(ExitList) > 0) {

        OutputTextNoBr ("</n>" + Trim(game.pov.parent.exitMessage) + " ")
        foreach (i, ScopeExits()) {

          Count = ListCount(ScopeExits())
          Index = IndexOf(ScopeExits(), i)

          OutputTextNoBr("{command:" + i.alias + "}")
          if(Count = (Index + 1)) {OutputTextNoBr(".")}
          else if (Count = Index + 2) {OutputTextNoBr(" or ")}
          else {OutputTextNoBr(", ")}
        }
      }
    ]]></description>
  </type>

  <type name="editor_player">
    <inherit name="TG_Standard" />
  </type>

  <type name="defaultexit">
    <inherit name="TG_Standard" />
    <runscript />
    <static type="boolean">false</static>
    <visible type="boolean">true</visible>
    <scenery type="boolean">false</scenery>
    <locked type="boolean">false</locked>
    <isExit type="boolean">false</isExit>
    <lockmessage type="string">That way is locked</lockmessage>
    <lookonly type="boolean">false</lookonly>
    <lightstrength type="string"></lightstrength>
    <exitLocations type="stringlist">
      <value>x; y</value>
    </exitLocations>
    <exitRoomDestination type="stringdictionary">
      <item>
        <key>x; y</key>
        <value>LocationName; x; y</value>
      </item>
    </exitRoomDestination>
    <blocked type="stringlist">
      <value>x; y</value>
    </blocked>
    <script type="script"><![CDATA[
      Location = game.pov.x + "; " + game.pov.y
      Direction = StringListItem(this.alt, 0)

      if (Location in this.exitRoomDestination) {

        Destination = Split(StringDictionaryItem(this.exitRoomDestination, Location))
        if (Location in this.exitRoomDesc) {
          msg(StringDictionaryItem(this.exitRoomDesc, Location))
        }
        TempLoc = ListItem(Destination, 0)
       TempLoc = GetObject (TempLoc)
       TempX = ListItem(Destination, 1)
        //TempX = Trim(TempX)
        TempX = ToInt(TempX)
        TempY = ListItem(Destination, 2)
        TempY = Trim(TempY)
        TempY = ToInt(TempY)
        game.pov.x = TempX
        game.pov.y = TempY
        MoveObject(game.pov, TempLoc)
      }
      else {

        switch(Direction){
          case("w"){game.pov.x = game.pov.x - 1}
          case("e"){game.pov.x = game.pov.x + 1}
          case("n"){game.pov.y = game.pov.y + 1}
          case("s"){game.pov.y = game.pov.y - 1}
          case("nw"){
            game.pov.x = game.pov.x - 1
            game.pov.y = game.pov.y + 1}
          case("ne"){
            game.pov.x = game.pov.x + 1
            game.pov.y = game.pov.y + 1}
          case("sw"){
            game.pov.x = game.pov.x - 1
            game.pov.y = game.pov.y - 1}
          case("se"){
            game.pov.x = game.pov.x + 1
            game.pov.y = game.pov.y - 1}
          default {msg ("Sorry, but you either didn't set a direction, changed the exits alt attribute or tried to use this with up, down, in or out without setting it to be locational / a map exit.</n></n>I'm sorry dave, the z axis is too annoying to implement.")}
        }
      }
      SetStage(True)
    ]]></script>
  </type>
  <type name="TG_ObjectRoom">
    <isroom />
  </type>

  <function name="SetStage" parameters="DoDesc"><![CDATA[
    // A script for automatically setting up a room based on the players x and y coordinates.
    // This includes:
    // Making objects visible, if they're not set as protected ([Object].Protected = False) and both their x and y coordinates are the same as the player's.
    // Running the [object].SetDesc Script on all visible objects to add their description to the Room's "[Room].FinalDesc" string along with the normal description.
    // Displaying said description.
    //
    // What you need:
    // x and y coordinates on room, player and objects (Contained in the relevant TG Object types)
    // Room description set up as script.
    //
    // The first Part is run on the first time to add all exits as a list to their relevant rooms. This is because Quest is terrible and doesn't let you select all exits in a room, only the visible ones!
    firsttime {
      Exits = AllExits()
      foreach (i, AllRooms()) {
        i.exits = NewObjectList()
        foreach (i2, Exits) {
          if (i2.parent = i) {
            list add (i.exits, i2)
          }
        }
      }
    }
    Location = game.pov.x + "; " + game.pov.y
    Children = GetDirectChildren (game.pov.parent)
    list remove (Children, game.pov)
    LocalExits = NewObjectList()
    foreach (i, game.pov.parent.exits) {
      list add (LocalExits, i)
    }
    if (ListCount(Children) > 0) {
      foreach (i, Children) {
        if (i.protected = False and i.x = game.pov.x and i.y = game.pov.y) {
          // Sets the object visible
          i.visible = True
        }
        else if (i.protected = false) {
          // If the object isn't included in the if statement because it's not in the same place, it's deactivated
          i.visible = False
        }
      }
    }
    // Regulating the Exits
    firsttime{
      if(hasAttribute(this, exitRoomDesc) = false){this.exitRoomDesc = NewScriptDictionary()}
    }

    if (ListCount(LocalExits) > 0) {
      foreach (i, LocalExits) {
        if (i.protected = false) {
          Strange = ListItem(i.alt, 0)
          // Behold the mother of all ifs. Just don't worry about it. It only checks if the player is about to go out of bounds.
          if ((game.pov.x = 0 and (Strange = "w" or Strange = "sw" or Strange = "nw")) or (game.pov.x = game.pov.parent.maxx and (Strange = "e" or Strange = "se" or Strange = "ne")) or (game.pov.y = 0 and (Strange = "s" or Strange = "sw" or Strange = "se")) or (game.pov.y = game.pov.parent.maxy and (Strange = "n" or Strange = "nw" or Strange = "ne"))) {
            i.visible = false
          }
          else {
            i.visible = true
          }

          if (ListContains(i.exitLocations, Location)){i.visible = true}

          foreach (i2, i.blocked) {
            if (i2 = Location) {
              i.visible = false
            }
          }
          if (i.static = true and (ListContains(i.blocked, Location))) {
            i.visible = true
          }
          else if (i.static = true and (ListContains(i.blocked, Location) = false)) {
            i.visible = false
          }
        }
      }
    }
    // Calling the Description
    if (DoDesc = True) {
      do (game.pov.parent, "description")
    }
  ]]></function>

  <function name="AddExit" parameters="RoomVar, ExitName">
    // Takes RoomVar and ExitVar as paramenters (RoomName; ExitName)
    // Changes a variable that doesn't even exist until your game starts, don't worry 'bout it bbg
    list add (RoomVar.exits, ExitName)
  </function>

  <function name="RemoveExit" parameters="RoomVar, ExitVar">
    // Takes RoomVar and ExitVar as paramenters (RoomName; ExitName)
    // Changes a variable that doesn't even exist until your game starts, don't worry 'bout it bbg
    list remove (RoomVar.exits, ExitName)
  </function>
</library>
